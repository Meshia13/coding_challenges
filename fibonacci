/////////////////////////////////////////////////////////////
// 
////////////////// CLIMBING STAIRS /////////////////////////
// 
// You are climbing a staircase. It takes n steps to reach the top.
// Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 // Example 1:

// Input: n = 2
// Output: 2
// Explanation: There are two ways to climb to the top.
// 1. 1 step + 1 step
// 2. 2 steps
// Example 2:

// Input: n = 3
// Output: 3
// Explanation: There are three ways to climb to the top.
// 1. 1 step + 1 step + 1 step
// 2. 1 step + 2 steps
// 3. 2 steps + 1 step
 
// Constraints:

// 1 <= n <= 45

////////////////////////////////////////////////////////////////////////////////////////////////
// 
// This problem involves the Fibonacci Sequence
//  fibonnaci sequence is the nect number in sequence is the sum of the previous two numbers
//  [1,2,3,5,8,13,21]
// 
// 1+2 =3, 2+3=5, 3+5=8, 5+8=13, etc

var climbStairs = function(n) {
    let step = [];
    step[1] = 1;
    step[2] = 2
    
    for (let i =3; i <= n; i++) {
        
//         step index = step index minus one index back + step index minus two indeces back
        step[i] = step[i - 1] + step[i - 2];
//         ex. step[4] = step[i - 1](3) + step[i -2](2)
        // step[4] = 5
        // step[5] = step[i -1(5)] + step[i -2(3)] =8
        // we are trying to get the answer for i
    }
    return step[n]
}

console.log(climbStairs(4))